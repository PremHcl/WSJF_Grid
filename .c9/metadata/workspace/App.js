{"filter":false,"title":"App.js","tooltip":"/App.js","undoManager":{"mark":28,"position":28,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":3,"column":0},"action":"remove","lines":["var Ext = window.Ext4 || window.Ext;","window.console = window.console || (function noop() {}); // keeps IE from blowing up","",""]},{"start":{"row":3,"column":0},"end":{"row":4,"column":0},"action":"remove","lines":["",""]},{"start":{"row":3,"column":4},"end":{"row":140,"column":0},"action":"remove","lines":["// entry point to app","    launch: function() {","        this.releaseCombobox = this.add({","            xtype: 'rallyreleasecombobox',","            listeners: {","                ready: this._onReleaseComboboxLoad,","                change: this._onReleaseComboboxChanged,","                scope: this","            }","        }); ","    },","    ","    _onReleaseComboboxLoad: function() {","        var query = this.releaseCombobox.getQueryFromSelected();","        this._loadFeatures(query);","    },","    _onReleaseComboboxChanged: function() {","        var store = this._myGrid.getStore();","        store.clearFilter(true);","        store.filter(this.releaseCombobox.getQueryFromSelected());","    },","    ","    // load features into store","    _loadFeatures: function(query) {","        Ext.create('Rally.data.WsapiDataStore', {","            model: 'PortfolioItem/Feature',","            autoLoad: true,","            filters: query,","            remoteSort: false,","            listeners: {","                load: function(store, records, success) {","                    // console.log(\"Loaded Store with %i records\", records.length);","                    this._calculateScore(records); // make sure the scores are up to date","                    this._updateGrid(store); // populate the grid","                },","                update: function(store, rec, modified, opts) {","                    this._calculateScore([rec]); // only update the record (feature) that changed","                },","                scope: this","            },","","            fetch: ['Name', 'FormattedID', 'Release', 'TimeValue', 'OERR', 'UserValue', 'Score', 'JobSize']","        });","    },","","    _calculateScore: function(records) {","        Ext.Array.each(records, function(feature) {","            // get the data used to calc score","            var jobSize = feature.data.JobSize;","            var timeValue = feature.data.TimeValue;","            var OERR = feature.data.OERR;","            var userValue = feature.data.UserValue;","            var oldScore = feature.data.Score; // if feature is undefined, set it to 0","","            if (jobSize > 0) { // jobSize is the denominator so make sure it's not 0","                var score = Math.floor(((userValue + timeValue + OERR ) / jobSize) + 0.5);","                if (oldScore !== score) { // only update if score changed","                    feature.set('Score', score); // set score value in db","                    //feature.save();","                    // don't call feature.save(); it just breaks stuff","                    // console.log(\"Setting a new score\", score);","                }","            }","        });","    },","","    _createGrid: function(myStore) {","        var mySort = function(state) {","            var ds = this.up('grid').getStore();","            var field = this.getSortParam();","            ds.sort({ // SDK grid has a bug with null values, which mucks up the native sort so create our own","                property: field,","                direction: state,","                sorterFn: function(v1, v2)","                {","                    v1 = v1.get(field);","                    v2 = v2.get(field);","                    if (v1 > v2) {return 1;}","                    if (v1 == v2) {return 0;}","                    if (v1 < v2) {return -1;}","                }","            });","        };","","        // console.log(\"Load up a populated grid!\", myStore);","        this._myGrid = Ext.create('Rally.ui.grid.Grid', {","            xtype: 'rallygrid',","            title: 'Feature Scoring Grid',","            height: '98%',","            store: myStore,","            enableEditing: true,","            selType: 'cellmodel',","            columnCfgs: [{ // override ID and Name configs to prevent default edit enabling","                text: 'Portfolio ID',","                dataIndex: 'FormattedID',","                flex: 1,","                xtype: 'templatecolumn',","                tpl: Ext.create('Rally.ui.renderer.template.FormattedIDTemplate') // make the ID a live link","            }, ","            {","                text: \"Name\",","                dataIndex: \"Name\",","                flex: 2","            }, ","            ","            'TimeValue','OERR', 'UserValue', 'JobSize',","","            { // override score so that the user can't edit it","                text: \"Score\",","                dataIndex: 'Score',","                doSort: mySort","            }]","        });","        this.add(this._myGrid);","","        // override the event publish to prevent random refreshes of the whole app when the cell changes","       var celledit = this._myGrid.plugins[0];","        var oldPub = celledit.publish;","        var newPub = function(event, varargs) {","            if (event !== \"objectupdate\") {","                oldPub.apply(this, arguments);","            }","            else {","                // no-op","            }","        };","","        celledit.publish = Ext.bind(newPub, celledit);","    },","    _updateGrid: function(myStore) {","        if (this._myGrid === undefined) {","            this._createGrid(myStore);","        }","        else {","            this._myGrid.reconfigure(myStore);","        }","    }",""]},{"start":{"row":3,"column":4},"end":{"row":6,"column":5},"action":"insert","lines":["items:{ html:'<a href=\"https://help.rallydev.com/apps/2.0rc3/doc/\">App SDK 2.0rc3 Docs</a>'},","    launch: function() {","        //Write app code here","    }"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":8,"column":0},"action":"remove","lines":["Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    items:{ html:'<a href=\"https://help.rallydev.com/apps/2.0rc3/doc/\">App SDK 2.0rc3 Docs</a>'},","    launch: function() {","        //Write app code here","    }","});",""]},{"start":{"row":0,"column":0},"end":{"row":157,"column":0},"action":"insert","lines":["Ext.define('CustomApp', {","    extend: 'Rally.app.App',","    componentCls: 'app',","    //items:{ html:'<a href=\"https://help.rallydev.com/apps/2.0rc2/doc/\">App SDK 2.0rc2 Docs</a>'},","    launch: function() {","        this.releaseCombobox = this.add({","            xtype: \"rallyreleasecombobox\",","            allowNoEntry: true,","            listeners: {","                ready: this._addPICombobox,","                change: this._onReleaseComboboxChanged,","                scope: this","            }","        });","    }, //end launch","    ","    _addPICombobox: function() {","        console.log(\"PI Combobox added\");","        this.piCombobox = this.add({","            xtype: \"rallyportfolioitemtypecombobox\",","            defaultSelectionPosition : 'last',","            listeners: {","                ready: this._onPICombobox,","                change: this._onPICombobox,","                scope: this","            }","        });","    },","","    _onPICombobox: function() {","        var selectedType = this.piCombobox.getRecord();","        var query = [];","        if (this.piCombobox.getRecord().get('Ordinal') === 0) {","            // Only use the release filter if the PI is the lowest level","            query = this.releaseCombobox.getQueryFromSelected();","        }","        console.log(\"query: \", query);","    ","        Rally.data.ModelFactory.getModel({","            type: selectedType.get('TypePath'),","            success: function(model){","                if (this._myGrid === undefined) {","                    Ext.create(\"Rally.data.WsapiDataStore\", {","                        model: model,","                        autoLoad: true,","                        filters: query,","                        remoteSort: false,","                        listeners: {","                            load: function(store, records, success) {","                                this._updateGrid(store);","                            },","                            update: function(store, rec, modified, opts) {","                                this._calculateScore([rec]);","                            },","                            scope: this","                        },","                        fetch: [\"Name\", \"FormattedID\", \"Release\", ","                            \"TimeCriticality\", \"RROEValue\", \"UserBusinessValue\",","                            \"ValueScore\", \"JobSize\"]","                    });","                }","                else { // grid exists, reset the model to the correct PI type","                    this._myGrid.reconfigureWithModel(model);","                    ","                    // clear and re-apply filter since reconfiguring model ","                    // doesn't do this","                    var store = this._myGrid.getStore();","                    store.clearFilter(!0), store.filter(query);","                   ","                    // re-apply grid update listeners","                    var that = this;","                    store.addListener('update', function(store, rec, modified, opts) {","                        that._calculateScore([rec]);","                    });","                    store.addListener('load', function(store, records, modified, opts) {","                        that._calculateScore(records); that._updateGrid(store);","                    });","                }","            },","            scope: this","        });","    },","    ","    _onReleaseComboboxChanged: function() {","        // if we don't yet have a PI combo box or if this is anything other than","        // the lowest level PI, bail","        if ( this.piCombobox ) {","            if (this.piCombobox.getRecord().get('Ordinal') === 0)","            {","                if(this._myGrid ) {","                    var store = this._myGrid.getStore();","                    store.clearFilter(!0), store.filter(this.releaseCombobox.getQueryFromSelected());","                }","                else { //grid does not yet exist - can this happen?","                }","            }","        }","    },","    ","    _calculateScore: function(records) {","        Ext.Array.each(records, function(feature) {","            //console.log(\"feature\", feature.data);","            var jobSize = feature.data.JobSize;","            var timeValue = feature.data.TimeCriticality;","            var OERR = feature.data.RROEValue;","            var userValue = feature.data.UserBusinessValue;","            var oldScore = feature.data.ValueScore;","            if (jobSize > 0) { // jobSize is the denominator so make sure it's not 0","                var score = Math.floor(((userValue + timeValue + OERR ) / jobSize) + 0.5);","                if (oldScore !== score) { // only update if score changed","                    feature.set('ValueScore', score); // set score value in db","                }","            }","        });","    },","    ","    _createGrid: function(myStore) {","        console.log(\"Creating Grid\");","        this._myGrid = Ext.create(\"Rally.ui.grid.Grid\", {","            xtype: \"rallygrid\",","            title: \"Feature Scoring Grid\",","            height: \"98%\",","            store: myStore,","            selType: \"cellmodel\",","            columnCfgs: [","                {","                    text: \"Portfolio ID\",","                    dataIndex: \"FormattedID\",","                    flex: 1,","                    xtype: \"templatecolumn\",","                    tpl: Ext.create(\"Rally.ui.renderer.template.FormattedIDTemplate\")","                }, ","                {","                    text: \"Name\",","                    dataIndex: \"Name\",","                    flex: 2","                }, ","                \"TimeCriticality\", \"RROEValue\", \"UserBusinessValue\", \"JobSize\", ","                {","                    text: \"Score\",","                    dataIndex: \"ValueScore\",","                    editor: null","                }","            ],","            scope: this","        }), this.add(this._myGrid);","    },","    ","    _updateGrid: function(myStore) {","        if (this._myGrid === undefined) {","            this._createGrid(myStore);","        }","        else {","            this._myGrid.reconfigure(myStore);","        }","    }","});",""]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":29},"end":{"row":58,"column":34},"action":"remove","lines":["Value"]},{"start":{"row":58,"column":29},"end":{"row":58,"column":30},"action":"insert","lines":["W"]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":30},"end":{"row":58,"column":31},"action":"insert","lines":["S"]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":31},"end":{"row":58,"column":32},"action":"insert","lines":["J"]}]}],[{"group":"doc","deltas":[{"start":{"row":58,"column":32},"end":{"row":58,"column":33},"action":"insert","lines":["F"]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":44},"end":{"row":106,"column":45},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":43},"end":{"row":106,"column":44},"action":"remove","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":42},"end":{"row":106,"column":43},"action":"remove","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":41},"end":{"row":106,"column":42},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":40},"end":{"row":106,"column":41},"action":"remove","lines":["V"]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":40},"end":{"row":106,"column":41},"action":"insert","lines":["W"]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":41},"end":{"row":106,"column":42},"action":"insert","lines":["S"]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":42},"end":{"row":106,"column":43},"action":"insert","lines":["J"]}]}],[{"group":"doc","deltas":[{"start":{"row":106,"column":40},"end":{"row":106,"column":48},"action":"remove","lines":["WSJScore"]},{"start":{"row":106,"column":40},"end":{"row":106,"column":49},"action":"insert","lines":["WSJFScore"]}]}],[{"group":"doc","deltas":[{"start":{"row":110,"column":33},"end":{"row":110,"column":38},"action":"remove","lines":["Value"]},{"start":{"row":110,"column":33},"end":{"row":110,"column":34},"action":"insert","lines":["W"]}]}],[{"group":"doc","deltas":[{"start":{"row":110,"column":34},"end":{"row":110,"column":35},"action":"insert","lines":["S"]}]}],[{"group":"doc","deltas":[{"start":{"row":110,"column":33},"end":{"row":110,"column":40},"action":"remove","lines":["WSScore"]},{"start":{"row":110,"column":33},"end":{"row":110,"column":42},"action":"insert","lines":["WSJFScore"]}]}],[{"group":"doc","deltas":[{"start":{"row":140,"column":32},"end":{"row":140,"column":37},"action":"remove","lines":["Value"]},{"start":{"row":140,"column":32},"end":{"row":140,"column":33},"action":"insert","lines":["W"]}]}],[{"group":"doc","deltas":[{"start":{"row":140,"column":33},"end":{"row":140,"column":34},"action":"insert","lines":["S"]}]}],[{"group":"doc","deltas":[{"start":{"row":140,"column":34},"end":{"row":140,"column":35},"action":"insert","lines":["J"]}]}],[{"group":"doc","deltas":[{"start":{"row":140,"column":32},"end":{"row":140,"column":40},"action":"remove","lines":["WSJScore"]},{"start":{"row":140,"column":32},"end":{"row":140,"column":41},"action":"insert","lines":["WSJFScore"]}]}],[{"group":"doc","deltas":[{"start":{"row":139,"column":27},"end":{"row":139,"column":28},"action":"insert","lines":["W"]}]}],[{"group":"doc","deltas":[{"start":{"row":139,"column":28},"end":{"row":139,"column":29},"action":"insert","lines":["S"]}]}],[{"group":"doc","deltas":[{"start":{"row":139,"column":29},"end":{"row":139,"column":30},"action":"insert","lines":["J"]}]}],[{"group":"doc","deltas":[{"start":{"row":139,"column":30},"end":{"row":139,"column":31},"action":"insert","lines":["F"]}]}],[{"group":"doc","deltas":[{"start":{"row":139,"column":31},"end":{"row":139,"column":32},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":139,"column":31},"end":{"row":139,"column":32},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":139,"column":31},"end":{"row":139,"column":32},"action":"insert","lines":[" "]}]}]]},"ace":{"folds":[],"scrolltop":3120,"scrollleft":0,"selection":{"start":{"row":145,"column":35},"end":{"row":145,"column":35},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":140,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1419274769726,"hash":"c1d5371a5fcdd84735fc0cfac88fe3374a9c0565"}